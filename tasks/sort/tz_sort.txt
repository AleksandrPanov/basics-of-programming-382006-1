У каждой соритровки должен быть следующий прототип:
void имя_сортировки(double*  ar, int n);

Обязательно реализовать следующие сортировки:
1. пузырьком
2. вставками
3. выбором
4. слиянием (merge)
Дополнительные сортировки (можно выбрать любую):
5. использование std::sort из algorithm
6. быстрая (quick)
7. использование гибридных merge и quick сортировок
   (снавчало используется сортировка merge/quick, а когда массивы становятся маленькими, то использовать квадратичную сортировку)

Дожны быть реализованы следующие особенности:
1. тип массива double
2. массив случайный (фиксируем seed константой)
3. множество значений случайного массива: числа от -100, до +100 с шагом 0.1 {-100, -99.9, ..., 99.9, 100}
4. сортировка идет по возрастанию
5. все сортировки работают с копией случайного массива
6. для проверки корректонсти сортировки использовать функцию bool check(double* ar, int n):
bool check(double* ar, int n)
{
    for (int i = 0; i < n - 1; i++)
        if (ar[i + 1] < ar[i])
            return false;
    return true;
}
7. время замерять в миллисекундах, с помощью функции clock()
8. использовать указатель на функцию void (*my_sort) (double *, int), все вызовы сортировок выполнять через указатель my_sort
    
Необходимо замерить время работы каждой сортировки при разных n. Результавт записать в файл с расширением csv и построить график времени работы сортировки от n (график построить в Excel).
Построить обычный и логарфмический графики.
Построить графики для следующих n:
n = 10^4
n = 2 * 10^4
n = 3 * 10^4
n = 4 * 10^4
...
n = 10^5

Написать отчет по шаблону. Для каждой сортировки уточнить, устойчива ли она.